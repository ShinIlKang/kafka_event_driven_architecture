package com.fastcampus.kafkahandson.ugc.adapter.inspectedpost;

import com.fastcampus.kafkahandson.ugc.CustomObjectMapper;
import com.fastcampus.kafkahandson.ugc.adapter.common.OperationType;
import com.fastcampus.kafkahandson.ugc.adapter.common.Topic;
import com.fastcampus.kafkahandson.ugc.inspectedPost.InspectedPost;
import com.fastcampus.kafkahandson.ugc.port.InspectedPostMessageProducePort;
import com.fasterxml.jackson.core.JsonProcessingException;
import lombok.RequiredArgsConstructor;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Component;

@RequiredArgsConstructor
@Component
public class InspectedPostMessageProduceAdapter implements InspectedPostMessageProducePort {
    private final KafkaTemplate<String, Object> kafkaTemplate;
    private final CustomObjectMapper customObjectMapper = new CustomObjectMapper();

    @Override
    public void sendCreateMessage(InspectedPost inspectedPost) {
        InspectedPostMessage message = new InspectedPostMessage(
                inspectedPost.getPost().getId(),
                new InspectedPostMessage.Payload(
                        inspectedPost.getPost(),
                        inspectedPost.getCategoryName(),
                        inspectedPost.getAutoGeneratedTags(),
                        inspectedPost.getInspectedAt()
                ),
                OperationType.CREATE
        );
        // message를 보낸다.
        this.sendMessage(message);
    }

    @Override
    public void sendUpdateMessage(InspectedPost inspectedPost) {
        InspectedPostMessage message = new InspectedPostMessage(
                inspectedPost.getPost().getId(),
                new InspectedPostMessage.Payload(
                        inspectedPost.getPost(),
                        inspectedPost.getCategoryName(),
                        inspectedPost.getAutoGeneratedTags(),
                        inspectedPost.getInspectedAt()
                ),
                OperationType.UPDATE
        );
        // message를 보낸다.
        this.sendMessage(message);
    }

    @Override
    public void sendDeleteMessage(Long id) {
        InspectedPostMessage message = new InspectedPostMessage(
                id,
                null,
                OperationType.DELETE
        );
        this.sendMessage(message);
    }

    private void sendMessage(InspectedPostMessage message) {
        try {
            kafkaTemplate.send(Topic.INSPECTED_POST, message.getId().toString(), customObjectMapper.writeValueAsString(message));
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }
}
